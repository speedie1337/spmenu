#!/bin/sh
# spmenu_desktop - list .desktop entries with the icon.
# NOTE: Please pull request if you have any possible improvements.
[ -z "$desktop_dir" ] && desktop_dir="/usr/share/applications"
[ -z "$icon_dir" ] && icon_dir="/usr/share/icons/hicolor /usr/share/pixmaps"
[ -z "$temporary_dir" ] && temporary_dir="$HOME/.config/spmenu/desktop/cache"
[ -z "$useimage" ] && useimage=true
[ -z "$RUNLAUNCHER" ] && RUNLAUNCHER=spmenu
[ -z "$RUNLAUNCHER_ARGS" ] && RUNLAUNCHER_ARGS="--lines 20 --columns 1 --image-size 100 --image-gaps 20"
[ -z "$LOGFILE" ] && LOGFILE="/tmp/spmenu_desktop.log"

# functions
print_menu() { res="$(print_list | $RUNLAUNCHER $RUNLAUNCHER_ARGS)"; }
prep() { mkdir -p "$temporary_dir"; [ -f "$temporary_dir/../config" ] && . "$temporary_dir/../config"; rm -f "$LOGFILE"; touch "$LOGFILE"; }
scan() { entry_c="$(find "$desktop_dir" -type f | wc -l)"; cached_c="$(find "$temporary_dir" -type f | wc -l)"; cached="$(find "$temporary_dir" -type f)"; }

# cache it, this means some speed improvements
cache() {
    printf "Cached: %s\n" "$cached_c" >> "$LOGFILE"
    printf "Entries: %s\n" "$entry_c" >> "$LOGFILE"
    [ "$cached_c" = "$entry_c" ] && return # we don't need to cache anything, it's already done

    # find
    entry="$(find $desktop_dir -type f)"
    icons="$(find $icon_dir -type f)"

    # write new entries
    for i in $(seq "$entry_c"); do
        cur_file="$(printf "%s" "$entry" | sed "${i}q;d")"
        exec="$(grep -v "TryExec" "$cur_file" | grep -m1 "Exec=" | sed "s/Exec=//g; s/%U//g; s/%F//g")"
        name="$(grep "Name=" "$cur_file" | grep -v Generic | head -n 1 | sed "s/Name=//g")"

        # icon name
        icon_name="$(grep "Icon=" "$cur_file" | head -n 1 | sed "s/Icon=//g")"
        [ -n "$icon_name" ] && icon="$(printf "%s" "$icons" | grep "$icon_name[.]" | head -n 1)"

        # write the file
        printf "%s\n%s\n%s\n" "Name:$name" "Executable:$exec" "$icon" > "$temporary_dir/$(basename "$cur_file").entry"
    done
}

print_list() {
    # print data from entries
    for i in $(seq "$cached_c"); do
        # current file
        cur_file="$(printf "%s" "$cached" | sed "${i}q;d")" && [ ! -e "$cur_file" ] && printf "File '%s' does not exist. Skipping...\n" "$cur_file" >> "$LOGFILE" && continue

        # get details to display
        title="$(head -n 1 "$cur_file" | sed "s/Name://g")"
        icon="$(tail -n 1 "$cur_file")"

        [ -z "$title" ] && continue

        [ "$useimage" = "true" ] && [ ! -e "$icon" ] && useimage=false && reenable=1

        [ "$useimage" = "true" ] && printf "%s\t%s\n" "IMG:${icon}" "$title" || \
            printf "%s\n" "$title"
        [ "$reenable" = "1" ] && useimage=true
    done
}

execute_program() {
    [ -z "$res" ] && cached_c=0 || printf "User input: %s\n" "$res" >> "$LOGFILE"
    for i in $(seq "$cached_c"); do
        cur_file="$(printf "%s" "$cached" | sed "${i}q;d")" && [ ! -f "$cur_file" ] && printf "File '%s' does not exist. Skipping...\n" "$cur_file" >> "$LOGFILE" && continue

        if grep -q "Name:$res" "$cur_file"; then
            exec="$(head -n 2 "$cur_file" | tail -n -1 | sed "s/Executable://g")"
            printf "Current file: '%s'\n" "$cur_file" >> "$LOGFILE"

            break;
        else
            exec=""
            continue;
        fi
    done

    # finally run the program
    if [ -n "$exec" ]; then
        /bin/sh -c $exec
    else
        printf "No executable found. Try clearing cache." >> "$LOGFILE"
    fi

    return 0
}

main() {
    prep
    scan
    cache
    print_menu "$@"
    execute_program "$@"
}

main "$@"
