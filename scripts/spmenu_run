#!/bin/sh
[ -z "$TERMINAL" ]           && TERMINAL="st -e"
[ -z "$BROWSER"  ]           && BROWSER="xdg-open"
[ -z "$TORRENT"  ]           && TORRENT="qbittorrent"
[ -z "$WEB_GREP" ]           && WEB_GREP="http:|https:|www[.]"
[ -z "$MAGNET_GREP" ]        && MAGNET_GREP="magnet:?"
[ -z "$HISTORY" ]            && HISTORY="${XDG_CACHE_HOME:-$HOME/.cache/}/spmenu_run.hist"
[ -z "$RUNLAUNCHER" ]        && RUNLAUNCHER=spmenu
[ -z "$RUNLAUNCHER_ARGS" ]   && RUNLAUNCHER_ARGS="--insert --hist-file $HISTORY $*"
[ -z "$PREFIX" ]             && PREFIX="/usr"
[ -z "$SORT_BY_NUMBER" ]     && SORT_BY_NUMBER="true"
[ -z "$SORT_IN_REVERSE" ]    && SORT_IN_REVERSE="true"
[ -z "$SORT_BY_RECENT" ]     && SORT_BY_RECENT="false"
[ -z "$SORT_ARGS" ]          && SORT_ARGS=""
[ -z "$HIDDEN_KEYWORDS" ]    && HIDDEN_KEYWORDS="spmenu"
[ -z "$KEYWORDS" ]           && KEYWORDS=""
[ -z "$DISPLAY_DUPLICATES" ] && DISPLAY_DUPLICATES="false"

check() {
    [ ! -d "$HOME/.config/spmenu/run" ] && mkdir -p "$HOME/.config/spmenu/run"
    if [ ! -f "$HOME/.config/spmenu/run/.first_run" ]; then
        print_help
        touch "$HOME/.config/spmenu/run/.first_run"
    fi
}

path() {
    [ "$SORT_BY_NUMBER" != "false" ] && NUMBERSORTARG="-n"
    [ "$SORT_IN_REVERSE" != "false" ] && REVERSESORTARG="-r"
    SORTARGS="$NUMBERSORTARG $REVERSESORTARG $SORT_ARGS"

    [ -z "$HIDDEN_KEYWORDS" ] && HIDDEN_KEYWORDS="NULL_ENTRY"

    print_menu() {
        print() {
            printf "%s\n" "$PATH" | \
                tr ':' '\n' | \
                sed 's#$#/#' | \
                xargs ls -lu --time-style=+%s 2>&1 | \
                grep -vE "$HIDDEN_KEYWORDS" | \
                grep -E "$KEYWORDS"
        }

        if [ "$SORT_BY_RECENT" != "false" ]; then
            print | awk '/^(-|l)/ { print $6, $7 }' | sort $SORTARGS | cut -d' ' -f 2 2>&1
        else
            print | awk '/^(-|l)/ { print $7 }' | sort $SORTARGS | cut -d' ' -f 2 2>&1
        fi
    }

    # uniq
    if [ "$DISPLAY_DUPLICATES" != "false" ]; then
        print_menu
    else
        print_menu | uniq
    fi

    command -v pre_func && pre_func
}

print_help() {
cat << EOF | $RUNLAUNCHER $RUNLAUNCHER_ARGS --lines 20 --columns 1 --normal --sgr1 "#FFFF00" --hide-cursor --no-allow-typing --no-color-items --hide-prompt --hide-powerline --hide-input --hide-right-arrow --hide-left-arrow --hide-mode --hide-match-count > /dev/null
Start typing in keywords to list out entries. Press Enter to select an entry. The selected entry will be run through a shell.
To set spmenu options, you pass arguments to 'spmenu_run' directly. See 'spmenu --help' for a list of valid arguments.
To configure spmenu, you may also copy ${DESTDIR}${PREFIX}/share/spmenu/example.Xresources to $HOME/.config/spmenu/spmenurc and edit that.

- Type in '?' to show this help screen at any time.
- If the entry selected starts with 'www', it will instead be treated as a link and spawned in a web browser (\$BROWSER)
- If the entry selected starts with 'magnet', it will instead be treated as a magnet link and spawned in a torrent client (\$TORRENT)

$(printf '\033[0;31m')Note: This may also be displayed if you deleted your spmenu configuration directory.
EOF
}

print_config() {
    [ -f "$HOME/.config/spmenu/run/config" ] && . "$HOME/.config/spmenu/run/config" && return
    mkdir -p "$HOME/.config/spmenu/run"
cat << EOF > "$HOME/.config/spmenu/run/config"
# spmenu_run default configuration file
#
# This is the configuration file for the run launcher spmenu comes with.
# It is not the configuration file for spmenu, see ~/.config/spmenu/spmenu.conf for that.
#
# spmenu_run runs function 'pre_func' before spawning spmenu, and 'post_func' after spawning spmenu.
# You may create those functions below. For 'post_func', the selected item is passed as an argument (\$1)
#
# For example, to implement a basic history file:
#
# post_func() {
#   rm -f /tmp/spmenu_entryhist; printf "\$1\n" >> /tmp/spmenu_entryhist
# }
#
# You can use anything POSIX compliant shells support, as well as programs available on the system.
TERMINAL="\${TERMINAL:-st -e}" # Terminal commands are spawned in
BROWSER="\${BROWSER:-xdg-open}" # Web browser, for URLs
TORRENT="\${TORRENT:-qbittorrent}" # Torrent client, for magnet links
WEB_GREP="http:|https:|www[.]" # Needs to be in grep -E syntax
MAGNET_GREP="magnet:?" # Needs to be in grep -E syntax
HISTORY="\${XDG_CACHE_HOME:-\$HOME/.cache/}/spmenu_run.hist" # History file, spmenu (meaning your user) must have permission to read and write to it.
RUNLAUNCHER="\${RUNLAUNCHER:-spmenu}" # Run launcher to use
RUNLAUNCHER_ARGS="--insert --hist-file \$HISTORY \$*" # Arguments passed to \$RUNLAUNCHER
SORT_BY_NUMBER="true" # Sort by numbers
SORT_IN_REVERSE="true" # Sort in reverse
SORT_BY_RECENT="false" # Sort by recent
SORT_ARGS="" # Extra arguments passed to the sort command.
HIDDEN_KEYWORDS="spmenu" # Keywords that will be ignored, needs to be in grep -vE syntax.
KEYWORDS="" # Keywords that will be matched, needs to be in grep -E syntax.
DISPLAY_DUPLICATES="false" # Display duplicates or not
EOF
[ -f "$HOME/.config/spmenu/run/config" ] && . "$HOME/.config/spmenu/run/config" && return
}

parse() {
    dout="$(path | sed "s/\&/\&amp;/g" | $RUNLAUNCHER $RUNLAUNCHER_ARGS)"

    # parse
    [ "$(printf '%c' "$dout")" = "#" ] && EXEC=term
    [ "$(printf "$dout" | awk '{ print $1 }')" = "magnet" ] && EXEC=torrent
    [ "$(printf "$dout" | awk '{ print $1 }')" = "www" ] && EXEC=web
    [ "$(printf "$dout" | awk '{ print $1 }')" = "?" ] && print_help && main && return

    # check for keywords
    printf "%s" "$dout" | grep -qE "$WEB_GREP" && EXEC=web
    printf "%s" "$dout" | grep -qE "$MAGNET_GREP" && EXEC=torrent
}

exec_cmd() {
    [ -z "$EXEC" ] && EXEC=shell
    command -v post_func && post_func "$dout"

    case "$EXEC" in
        "shell") printf "%s" "$dout" | sed "s/#//g" | ${SHELL:-"/bin/sh"} & ;;
        "term") $TERMINAL -e "$(printf "%s" "$dout" | sed "s/#//g")" & ;;
        "web") $BROWSER "$(printf "%s" "$dout" | sed "s/www //g")" & ;;
        "torrent") $TORRENT "$(printf "%s" "$dout" | sed "s/magnet //g")" & ;;
    esac
}

main() {
    check "$@"
    print_config "$@"
    parse "$@"
    exec_cmd "$@"
}

main "$@"
